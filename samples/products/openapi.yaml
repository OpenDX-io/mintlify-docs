openapi: 3.0.3
info:
  title: Product Catalog API
  description: A simple API to manage products in an online catalog.
  version: 1.0.0
servers:
  - url: https://api.example.com/v1

paths:
  /products:
    get:
      summary: List all products
      description: Retrieve a list of available products.
      responses:
        "200":
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
      x-codeSamples:
        - lang: curl
          source: |
            curl -X GET https://api.example.com/v1/products
        - lang: javascript
          source: |
            fetch("https://api.example.com/v1/products")
              .then(res => res.json())
              .then(console.log)

    post:
      summary: Create a product
      description: Add a new product to the catalog.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductInput"
      responses:
        "201":
          description: Product created
      x-codeSamples:
        - lang: curl
          source: |
            curl -X POST https://api.example.com/v1/products \
              -H "Content-Type: application/json" \
              -d '{"name": "Laptop", "price": 1299.99, "category": "Electronics"}'
        - lang: javascript
          source: |
            fetch("https://api.example.com/v1/products", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ name: "Laptop", price: 1299.99, category: "Electronics" })
            }).then(res => res.json()).then(console.log)

  /products/{id}:
    get:
      summary: Get a product by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404":
          description: Product not found
      x-codeSamples:
        - lang: curl
          source: |
            curl -X GET https://api.example.com/v1/products/abc123
        - lang: javascript
          source: |
            fetch("https://api.example.com/v1/products/abc123")
              .then(res => res.json())
              .then(console.log)

    put:
      summary: Update a product
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductInput"
      responses:
        "200":
          description: Product updated
      x-codeSamples:
        - lang: curl
          source: |
            curl -X PUT https://api.example.com/v1/products/abc123 \
              -H "Content-Type: application/json" \
              -d '{"name": "Gaming Laptop", "price": 1599.99, "category": "Electronics"}'
        - lang: javascript
          source: |
            fetch("https://api.example.com/v1/products/abc123", {
              method: "PUT",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ name: "Gaming Laptop", price: 1599.99, category: "Electronics" })
            }).then(res => res.json()).then(console.log)

    delete:
      summary: Delete a product
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Product deleted
      x-codeSamples:
        - lang: curl
          source: |
            curl -X DELETE https://api.example.com/v1/products/abc123
        - lang: javascript
          source: |
            fetch("https://api.example.com/v1/products/abc123", {
              method: "DELETE"
            }).then(() => console.log("Product deleted"))

components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        price:
          type: number
          format: float
        category:
          type: string

    ProductInput:
      type: object
      required:
        - name
        - price
        - category
      properties:
        name:
          type: string
        price:
          type: number
          format: float
        category:
          type: string
